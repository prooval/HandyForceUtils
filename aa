// I have an object which has keys like Owner, or Branch__r and other keys. If the key's value contains "attributes", I want to parse that JSON value. Then,
// I want to add to the original object the keys received after parsing that JSON. However, I would like to use a convention like Branch__r.xxxx where xxxx
// is the key of the parsed JSON value.

protected beforeMigrationBatchOnRecordsReady(batchRecords: any[]): any[] {
    for (const eachRecord of batchRecords) {
        if (this.config.stageRecordsInFile) {
            this.flattenJsonAttributes(eachRecord);
        }
    }
    
    return batchRecords;
}

private flattenJsonAttributes(record: any): void {
    for (const key in record) {
        if (record.hasOwnProperty(key) && record[key]) {
            const value = record[key];
            
            // Check if the value is a string that contains "attributes" (likely JSON)
            if (typeof value === 'string' && value.includes('attributes')) {
                try {
                    const parsedValue = JSON.parse(value);
                    
                    // If parsing successful and contains attributes, add parsed keys to original object
                    if (parsedValue && typeof parsedValue === 'object') {
                        this.flattenObjectRecursively(record, parsedValue, key, 2); // Allow 2 levels deep
                    }
                } catch (error) {
                    // If JSON parsing fails, continue with next key
                    this.logger.logInfo(`Failed to parse JSON for key ${key}: ${error}`);
                }
            }
        }
    }
}

private flattenObjectRecursively(targetRecord: any, sourceObject: any, keyPrefix: string, maxDepth: number): void {
    if (maxDepth <= 0) return;
    
    for (const parsedKey in sourceObject) {
        if (parsedKey === 'attributes') {
            continue;
        }
        
        if (sourceObject.hasOwnProperty(parsedKey)) {
            // Use convention: originalKey.parsedKey
            const newKey = `${keyPrefix}.${parsedKey}`;
            
            if (targetRecord.hasOwnProperty(newKey)) {
                continue;
            }
            
            const parsedValue = sourceObject[parsedKey];
            targetRecord[newKey] = parsedValue;
            
            // If the parsed value is also a string that could be JSON, try to parse it recursively
            if (typeof parsedValue === 'string' && parsedValue.includes('attributes')) {
                try {
                    const nestedParsedValue = JSON.parse(parsedValue);
                    if (nestedParsedValue && typeof nestedParsedValue === 'object') {
                        this.flattenObjectRecursively(targetRecord, nestedParsedValue, newKey, maxDepth - 1);
                    }
                } catch (error) {
                    // If nested JSON parsing fails, continue
                    this.logger.logInfo(`Failed to parse nested JSON for key ${newKey}: ${error}`);
                }
            }
        }
    }
}
